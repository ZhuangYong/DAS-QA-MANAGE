{"version":3,"sources":["../../src/permission.js"],"names":["hasPermission","roles","permissionRoles","indexOf","some","role","whiteList","beforeEach","to","from","next","start","console","log","path","done","getters","length","dispatch","then","res","addRoutes","addRouters","catch","error","meta","query","noGoBack","afterEach"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;AACA;;AACA;;;;AAGA,SAASA,aAAT,CAAuBC,KAAvB,EAA8BC,eAA9B,EAA+C;AAC3C,QAAID,MAAME,OAAN,CAAc,OAAd,KAA0B,CAA9B,EAAiC,OAAO,IAAP;AACjC,QAAI,CAACD,eAAL,EAAsB,OAAO,IAAP;AACtB,WAAOD,MAAMG,IAAN,CAAW;AAAA,eAAQF,gBAAgBC,OAAhB,CAAwBE,IAAxB,KAAiC,CAAzC;AAAA,KAAX,CAAP;AACH;;AAGD,IAAMC,YAAY,CAAC,QAAD,EAAW,eAAX,CAAlB;AACA,iBAAOC,UAAP,CAAkB,UAACC,EAAD,EAAKC,IAAL,EAAWC,IAAX,EAAoB;AAClC,wBAAUC,KAAV;AACA,QAAI,qBAAJ,EAAgB;AACZC,gBAAQC,GAAR,CAAYL,EAAZ;AACA,YAAIA,GAAGM,IAAH,KAAY,QAAhB,EAA0B;AACtBJ,iBAAK,EAACI,MAAM,GAAP,EAAL;AACA,gCAAUC,IAAV;AACH,SAHD,MAGO;AACH,gBAAI,gBAAMC,OAAN,CAAcf,KAAd,CAAoBgB,MAApB,KAA+B,CAAnC,EAAsC;AAClC,gCAAMC,QAAN,CAAe,aAAf,EAA8BC,IAA9B,CAAmC,eAAO;AACtC,wBAAMlB,QAAQmB,IAAInB,KAAlB;AACA,oCAAMiB,QAAN,CAAe,gBAAf,EAAiC,EAACjB,YAAD,EAAjC,EAA0CkB,IAA1C,CAA+C,YAAM;AACjD,yCAAOE,SAAP,CAAiB,gBAAML,OAAN,CAAcM,UAA/B;AACAZ,wDAASF,EAAT;AACH,qBAHD;AAIH,iBAND,EAMGe,KANH,CAMS,YAAM;AACX,oCAAML,QAAN,CAAe,WAAf,EAA4BC,IAA5B,CAAiC,YAAM;AACnC,2CAAQK,KAAR,CAAc,YAAd;AACAd,6BAAK,EAACI,MAAM,QAAP,EAAL;AACH,qBAHD;AAIH,iBAXD;AAYH,aAbD,MAaO;AAEH,oBAAId,cAAc,gBAAMgB,OAAN,CAAcf,KAA5B,EAAmCO,GAAGiB,IAAH,CAAQpB,IAA3C,CAAJ,EAAsD;AAClDK;AACH,iBAFD,MAEO;AACHA,yBAAK,EAACI,MAAM,MAAP,EAAeY,OAAO,EAACC,UAAU,IAAX,EAAtB,EAAL;AACA,wCAAUZ,IAAV;AACH;AAEJ;AACJ;AACJ,KA9BD,MA8BO;AACH,YAAIT,UAAUH,OAAV,CAAkBK,GAAGM,IAArB,MAA+B,CAAC,CAApC,EAAuC;AACnCJ;AACH,SAFD,MAEO;AACHA,iBAAK,QAAL;AACA,gCAAUK,IAAV;AACH;AACJ;AACJ,CAxCD;;AA0CA,iBAAOa,SAAP,CAAiB,YAAM;AACnB,wBAAUb,IAAV;AACH,CAFD","file":"permission.js","sourcesContent":["import router from './router';\nimport store from './store';\nimport NProgress from 'nprogress'; // Progress 进度条\nimport 'nprogress/nprogress.css';// Progress 进度条样式\nimport {getToken} from '@/utils/auth'; // 验权\nimport {Message} from 'element-ui';\n\n// permissiom judge\nfunction hasPermission(roles, permissionRoles) {\n    if (roles.indexOf('admin') >= 0) return true; // admin权限 直接通过\n    if (!permissionRoles) return true;\n    return roles.some(role => permissionRoles.indexOf(role) >= 0);\n}\n\n// register global progress.\nconst whiteList = ['/login', '/authredirect'];// 不重定向白名单\nrouter.beforeEach((to, from, next) => {\n    NProgress.start(); // 开启Progress\n    if (getToken()) { // 判断是否有token\n        console.log(to);\n        if (to.path === '/login') {\n            next({path: '/'});\n            NProgress.done(); // router在hash模式下 手动改变hash 重定向回来 不会触发afterEach 暂时hack方案 ps：history模式下无问题，可删除该行！\n        } else {\n            if (store.getters.roles.length === 0) { // 判断当前用户是否已拉取完user_info信息\n                store.dispatch('GetUserInfo').then(res => { // 拉取user_info\n                    const roles = res.roles;\n                    store.dispatch('GenerateRoutes', {roles}).then(() => { // 生成可访问的路由表\n                        router.addRoutes(store.getters.addRouters); // 动态添加可访问路由表\n                        next({...to}); // hack方法 确保addRoutes已完成\n                    });\n                }).catch(() => {\n                    store.dispatch('FedLogOut').then(() => {\n                        Message.error('验证失败,请重新登录');\n                        next({path: '/login'});\n                    });\n                });\n            } else {\n                // 没有动态改变权限的需求可直接next() 删除下方权限判断 ↓\n                if (hasPermission(store.getters.roles, to.meta.role)) {\n                    next();//\n                } else {\n                    next({path: '/401', query: {noGoBack: true}});\n                    NProgress.done();// router在hash模式下 手动改变hash 重定向回来 不会触发afterEach 暂时hack方案 ps：history模式下无问题，可删除该行！\n                }\n                // 可删 ↑\n            }\n        }\n    } else {\n        if (whiteList.indexOf(to.path) !== -1) { // 在免登录白名单，直接进入\n            next();\n        } else {\n            next('/login'); // 否则全部重定向到登录页\n            NProgress.done(); // router在hash模式下 手动改变hash 重定向回来 不会触发afterEach 暂时hack方案 ps：history模式下无问题，可删除该行！\n        }\n    }\n});\n\nrouter.afterEach(() => {\n    NProgress.done(); // 结束Progress\n});\n"]}