{"version":3,"sources":["../../../src/utils/fetch.js"],"names":["service","create","baseURL","process","env","BASE_API","timeout","interceptors","request","use","getters","token","config","headers","console","log","error","reject","response","res","data","msg","status","CODE_SUCCESS","message","type","duration"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;AACA;;;;AACA;;AACA;;;;;;AAGA,IAAMA,UAAU,gBAAMC,MAAN,CAAa;AACzBC,aAASC,QAAQC,GAAR,CAAYC,QADI;AAEzBC,aAAS,IAFgB,EAAb,CAAhB;;AAMAN,QAAQO,YAAR,CAAqBC,OAArB,CAA6BC,GAA7B,CAAiC,kBAAU;AAEvC,QAAI,gBAAMC,OAAN,CAAcC,KAAlB,EAAyB;AACrBC,eAAOC,OAAP,CAAe,OAAf,IAA0B,qBAA1B;AAEH;AACD,WAAOD,MAAP;AACH,CAPD,EAOG,iBAAS;AAERE,YAAQC,GAAR,CAAYC,KAAZ;AACA,sBAAQC,MAAR,CAAeD,KAAf;AACH,CAXD;;AAcAhB,QAAQO,YAAR,CAAqBW,QAArB,CAA8BT,GAA9B,CACI,oBAAY;AACR,QAAMU,MAAMD,SAASE,IAArB;AADQ,QAEDC,GAFC,GAEoBF,GAFpB,CAEDE,GAFC;AAAA,QAEIC,MAFJ,GAEoBH,GAFpB,CAEIG,MAFJ;AAAA,QAEYF,IAFZ,GAEoBD,GAFpB,CAEYC,IAFZ;;AAGR,QAAIE,WAAW,gBAAMC,YAArB,EAAmC;AAC/B,gCAAQ;AACJC,qBAASH,GADL;AAEJI,kBAAM,OAFF;AAGJC,sBAAU,IAAI;AAHV,SAAR;AAKA,eAAO,kBAAQT,MAAR,CAAeI,GAAf,CAAP;AAaH,KAnBD,MAmBO;AACH,eAAOD,IAAP;AACH;AACJ,CA1BL,EAiCI,iBAAS;AACLN,YAAQC,GAAR,CAAY,QAAQC,KAApB;AACA,4BAAQ;AACJQ,iBAASR,MAAMQ,OADX;AAEJC,cAAM,OAFF;AAGJC,kBAAU,IAAI;AAHV,KAAR;AAKA,WAAO,kBAAQT,MAAR,CAAeD,KAAf,CAAP;AACH,CAzCL;;kBA4CehB,O","file":"fetch.js","sourcesContent":["import axios from 'axios';\nimport {Message, MessageBox} from 'element-ui';\nimport store from '../store';\nimport {getToken} from '../utils/auth';\nimport Const from './const';\n\n// 创建axios实例\nconst service = axios.create({\n    baseURL: process.env.BASE_API, // api的base_url\n    timeout: 5000                  // 请求超时时间\n});\n\n// request拦截器\nservice.interceptors.request.use(config => {\n    // Do something before request is sent\n    if (store.getters.token) {\n        config.headers['token'] = getToken(); // 让每个请求携带token--['X-Token']为自定义key 请根据实际情况自行修改\n        // config.headers['Access-Control-Allow-Origin'] = true\n    }\n    return config;\n}, error => {\n    // Do something with request error\n    console.log(error); // for debug\n    Promise.reject(error);\n});\n\n// respone拦截器\nservice.interceptors.response.use(\n    response => {\n        const res = response.data;\n        const {msg, status, data} = res;\n        if (status !== Const.CODE_SUCCESS) {\n            Message({\n                message: msg,\n                type: 'error',\n                duration: 5 * 1000\n            });\n            return Promise.reject(msg);\n            // 50008:非法的token; 50012:其他客户端登录了;  50014:Token 过期了;\n            // if (res.code === 50008 || res.code === 50012 || res.code === 50014) {\n            //     MessageBox.confirm('你已被登出，可以取消继续留在该页面，或者重新登录', '确定登出', {\n            //         confirmButtonText: '重新登录',\n            //         cancelButtonText: '取消',\n            //         type: 'warning'\n            //     }).then(() => {\n            //         store.dispatch('FedLogOut').then(() => {\n            //             location.reload();// 为了重新实例化vue-router对象 避免bug\n            //         });\n            //     });\n            // }\n        } else {\n            return data;\n        }\n    },\n\n    /**\n     * 下面的注释为通过response自定义code来标示请求状态，当code返回如下情况为权限有问题，登出并返回到登录页\n     * 如通过xmlhttprequest 状态码标识 逻辑可写在下面error中\n     */\n\n    error => {\n        console.log('err' + error);// for debug\n        Message({\n            message: error.message,\n            type: 'error',\n            duration: 5 * 1000\n        });\n        return Promise.reject(error);\n    }\n);\n\nexport default service;\n"]}